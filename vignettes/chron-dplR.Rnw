% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%\VignetteIndexEntry{Chronology Building in dplR}
\documentclass[a4paper,11pt]{article}
\usepackage{dplR} % dplR settings - needs some work
\usepackage[utf8]{inputenx} % R CMD build wants this here, not in dplR.sty
\input{ix-utf8enc.dfu} % more characters supported
\title{Chronology Building in dplR} 
\author{Andy Bunn \and Mikko Korpela}
<<echo=FALSE,results=hide>>=
library(dplR) # latexify(), latexDate()
@ 
\hypersetup{
  pdfauthor = {Andy Bunn; Mikko Korpela},
}
\date{\footnotesize Processed with dplR 
\Sexpr{packageDescription("dplR", field="Version")}
in \Sexpr{latexify(R.version.string)} on \Sexpr{latexDate()}}

\begin{document}
\bibliographystyle{jss}

\setkeys{Gin}{width=1.0\textwidth} % figure width
\SweaveOpts{concordance=TRUE}
\SweaveOpts{strip.white=true}
\SweaveOpts{include=FALSE}
<<echo=FALSE,results=hide>>=
options(width=62) # width of paper (number of characters)
options(useFancyQuotes=FALSE) # fancy quotes not included in fixed-width font?
Sys.setenv(LANGUAGE="en") # no translations to languages other than English
@ 

\maketitle

\begin{abstract}
In this vignette we cover methods for building mean-value chronologies using 
standardized ring widths.
\end{abstract}
\tableofcontents

\newpage

\section{Introduction}
\subsection{What Is Covered}
The Dendrochronology Program Library in R (dplR) is a package for 
dendrochronologists to handle data processing and analysis. This 
document gives an illustration of chronology development in dplR. 
\subsection{Citing dplR and R}
The creation of dplR is an act of love. We enjoy writing this software and 
helping users. However, neither of us is among the idle rich. Alas. We have
jobs and occasionally have to answer to our betters. There is a nifty 
\code{citation} function in R that gives you information on how to best 
cite R and, in many cases, its packages. We ask that you please cite dplR 
and R appropriately in your work. This way when our department chairs and 
deans accuse us of being dilettantes we can point to the use of dplR as a 
partial excuse.

<<a>>=
citation()
citation("dplR")
@

\section{Data Sets}
Throughout this vignette we will use the onboard data set \code{wa082} 
which gives the raw ring widths for Pacific silver fir \emph{Abies amabilis} 
at Hurricane Ridge in Washington, USA. There are 23 series covering 286 years.
The data are plotted in Figure~\ref{fig:rwl}. Note the summary stats below.
<<b, fig=TRUE>>=
library(dplR)
data(wa082)
wa082.sum <- summary(wa082)
mean(wa082.sum$year)
mean(wa082.sum$stdev)
mean(wa082.sum$median)
mean(wa082.sum$ar1)
mean(interseries.cor(wa082)[, 1])
plot(wa082, plot.type="spag")
@
\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-b}
\caption{A spaghetti plot of the Pacific silver fir ring widths.}
\label{fig:rwl}
\end{figure}

\textbf{By the way, if this is all new to you -- you should 
proceed immediately to a good primer on dendrochronology like 
\cite{Fritts2001}. This vignette is not intended to teach you about how to do 
tree-ring analysis. It is intended to teach you how to use the package.}

\section{Building Chronologies}
Let us make a few chronologies from the \code{wa082} data after detrending
each series with a spline that has a frequency response of 50\% at a 
wavelength of 2/3 of each series's length. Detrending is an enormously complicated
area unto itself. We use a spline here but could standardize by several other
methods and likely get results that look quite different. There is a reason, 
after all, that dendrochronologists have been arguing about detrending for decades.

<<c>>=
wa082.rwi <- detrend(wa082, method="Spline")
@


\subsection{Traditional Chronology}
The simplest way to make a chronology in \code{dplR} is chronology is with the \code{crn}
function which also has a \code{plot} method. This defaults to building a mean-value
chronology by averaging the rows of the \code{rwi} data using Tukey's biweight robust
mean (function \code{tbrm} in \code{dplR}). The result is plotted in Figure~\ref{fig:crn.plot} with a 30-year smoothing spline for visualization.
<<d, fig=TRUE>>=
wa082.crn <- chron(wa082.rwi, prefix="HUR")
tail(wa082.crn)
plot(wa082.crn, add.spline=TRUE, nyrs=30)
@
\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-d}
\caption{The \code{wa082} chronology.}
\label{fig:crn.plot}
\end{figure}

Note that the \code{chron} function will also compute a residual chronology by
``prewhitening'' the series before averaging. If the \code{prewhiten} flag is 	
set to \code{TRUE}, each series is whitened using \code{ar} prior to averaging. The 
residual chronology is thus white noise. Note that
the \code{wa082.std.resid} object has two columns with chronologies as well as the sample
depth in a third column. The result is plotted in 
Figure~\ref{fig:crn.plot.resid}. 
<<e, fig=TRUE>>=
wa082.std.resid <- chron(wa082.rwi, prefix="HUR", prewhiten = TRUE)
tail(wa082.std.resid)
plot(wa082.std.resid, add.spline=TRUE, nyrs=30)
@
\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-e}
\caption{The \code{wa082} chronology as the standard chronology and the residual
chronology.}
\label{fig:crn.plot.resid}
\end{figure}

\subsection{Using a Cutoff}
A relatively simple addition to the traditional chronology is to truncate the
chronology when the sample depth gets to a certain threshold. The output from
the \code{chron} function contains a column called \code{samp.depth} which shows the
number of series that are average for a particular year. We can use the 
\code{subset} function to modify the chronology. The result is plotted in 
Figure~\ref{fig:crn.plot.sd}. 

<<f, fig=TRUE>>=
head(wa082.crn)
wa082.trunc <- subset(wa082.crn, samp.depth > 5)
# and plot
plot(wa082.trunc,add.spline=T,nyrs=30)
@

\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-f}
\caption{The \code{wa082} chronology truncated by sample depth.}
\label{fig:crn.plot.sd}
\end{figure}

It would likely be more robust to recalculate the \code{rwi} object by truncating the 
\code{rwl} file and then making a chronology which could be done by nesting 
commands via:
<<g>>=
wa082.trunc2 <- chron(detrend(wa082[wa082.crn$samp.depth > 5,], 
                              method="Spline"), prefix="HUR")
@

The result in this case is likely to be virtually identical to truncating after calculating
the chronology as in Figure~\ref{fig:crn.plot.sd}.

A more interesting and likely more robust approach is to truncate via the
expressed population signal (EPS). The result is plotted in 
Figure~\ref{fig:crn.plot.eps}.

<<h, fig=TRUE>>=
wa082.ids <- autoread.ids(wa082)
eps.cut <- 0.75 # An arbitrary EPS cutoff for demonstration
wa082.rwi.stats <- rwi.stats.running(wa082.rwi, wa082.ids, window.length = 30)
yrs <- as.numeric(rownames(wa082.crn))
bar <- data.frame(yrs = c(min(yrs), wa082.rwi.stats$mid.year, max(yrs)),
                  eps = c(NA, wa082.rwi.stats$eps, NA))
op <- par(no.readonly=TRUE)
par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25,
    mfcol = c(2, 1), xaxs='i')
plot(yrs, wa082.crn[, 1], type = "n", xlab = "Year",
     ylab = "RWI", axes=FALSE)
cutoff <- max(bar$yrs[bar$eps < eps.cut], na.rm = TRUE)
xx <- c(500, 500, cutoff, cutoff)
yy <- c(-1, 3, 3, -1)
polygon(xx, yy, col = "grey80")
abline(h = 1, lwd = 1.5)
lines(yrs, wa082.crn[, 1], col = "grey50")
lines(yrs, ffcsaps(wa082.crn[, 1], nyrs = 30), col = "red", lwd = 2)
axis(1); axis(2); axis(3);
par(new = TRUE)
## Add EPS
plot(bar$yrs, bar$eps, type = "b", xlab = "", ylab = "",
     axes = FALSE, pch = 20, col = "blue")
axis(4, at = pretty(wa082.rwi.stats$eps))
mtext("EPS", side = 4, line = 1.1)
box()
## Second plot is the chronology after the cutoff only
## Chronology is rebuilt using just years after cutoff but
## that difference is essentially nil.
yr.mask <- yrs > cutoff
yrs2 <- yrs[yr.mask]
wa082.rwi2 <- detrend(wa082[yr.mask, ], method="Spline")
wa082.crn.eps <- chron(wa082.rwi2)
plot(yrs2, wa082.crn.eps[, 1], type = "n",
     xlab = "Year", ylab = "RWI", axes=FALSE)
abline(h = 1, lwd = 1.5)
lines(yrs2, wa082.crn.eps[, 1], col = "grey50")
lines(yrs2, ffcsaps(wa082.crn.eps[, 1], nyrs = 30),
      col = "red", lwd = 2)
axis(1); axis(2); axis(3); axis(4)
box()
par(op)
@

\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-h}
\caption{The \code{wa082} chronology truncated by EPS.}
\label{fig:crn.plot.eps}
\end{figure}

This method calculates a running value for EPS using the 
\code{rwi.stats.running} function with e 30-year window. Then we select a 
cutoff point where we truncate the chronology when the EPS value dips below 
a certain point. The cutoff method works in this case because the EPS dips
as sample depth declines. However, some feel this is a more objective way 
of setting a cutoff as opposed to just picking a minimum number of samples.

\subsection{Chronology uncertainty}
Typically we calculate a chronology by taking the average of each year from
the \code{rwi} object. (And that is typically the biweight robust mean.) The function
\code{chron} like pretty much all the functions in \code{dplR} are relatively simple 
chunks of code that are used for convenience. We can make our own chronology
and get the mean plus two standard errors of the yearly growth 
(Figure~\ref{fig:crn.plot.se}). Don't
get stuck in just using the prepackaged functions in \code{dplR}!

<<i, fig=TRUE>>=
wa082.avg <- apply(wa082.rwi2,1,mean,na.rm=TRUE)
se <- function(x){
  x2 <- na.omit(x)
  n <- length(x2)
  sd(x2)/sqrt(n)
}
wa082.se <- apply(wa082.rwi2,1,se)
wa082.sd <- apply(wa082.rwi2,1,sd,na.rm=TRUE)

par(mar = c(2, 2, 2, 2), mgp = c(1.1, 0.1, 0), tcl = 0.25, xaxs='i')
plot(yrs2, wa082.avg, type = "n",ylim=c(0.5,1.6),
     xlab = "Year", ylab = "RWI", axes=FALSE)
abline(h = 1, lwd = 1.5)
xx <- c(yrs2,rev(yrs2))
yy <- c(wa082.avg+wa082.se*2,rev(wa082.avg-wa082.se*2))
polygon(xx,yy,col="grey80",border = NA)
lines(yrs2, wa082.avg, col = "black")
lines(yrs2, ffcsaps(wa082.avg, nyrs = 30),
      col = "red", lwd = 2)
legend(x=1800,y=0.75,legend=c("Mean","2 SE", "30-yr Spline"),
       lwd=c(1,10,1), col=c("black","grey","red"),
       bg = "white")
axis(1); axis(2); axis(3); axis(4)
box()
par(op)
@

\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-i}
\caption{The \code{wa082} chronology with two standard errors.}
\label{fig:crn.plot.se}
\end{figure}

\subsection{Stripping out series by EPS}
We want to introduce one other approach that doesn't deal explicitly with
chronology building but can be used to build a better chronology. The 
\code{strip.rwl} function uses EPS-based chronology stripping \cite{Fowler2003} 
where each series is assessed to see if its inclusion in the chronology
improves the EPS. If it does not the series is dropped from the \code{rwl} object.
As we will see in this example two series are excluded which causes a modest
improvement in EPS (Figure~\ref{fig:crn.plot.strip}). 

<<j, fig=TRUE>>=
wa082.strip.rwl <- strip.rwl(wa082, ids = wa082.ids)
wa082.rwi.strip <- detrend(wa082.strip.rwl, method="Spline")
wa082.crn.strip <- chron(wa082.rwi.strip, prefix = "HUR")
wa082.crn.strip <- subset(wa082.crn.strip, samp.depth > 5)
plot(wa082.crn.strip, add.spline=TRUE, nyrs=30)
@

\begin{figure}[ht]
\centering
\includegraphics{chron-dplR-j}
\caption{The \code{wa082} chronology after stripping series with low EPS.}
\label{fig:crn.plot.strip}
\end{figure}

\section{Conclusion}
We have tried to introduce a few ways of building chronologies with \code{dplR} that
are either typical (like truncating by sample depth) or less commonly used. 
In this vignette we aren't advocating any particular method but trying to
get the users familiar with ways of interacting with the objects that 
\code{dplR} produces. Once the user understands the data structures the rest
of \code{R} opens up.

Again, we feel that it is important to reiterate that the advantage of using
\code{dplR} is that it gets the analyst to use \code{R} and thus have access to the 
essentially limitless tool that it provides. Go foRth!

\bibliography{dplR}

\end{document}
